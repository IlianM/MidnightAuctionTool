#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestionnaire d'Ench√®res V√©hicules - Version bases de donn√©es s√©par√©es
Application moderne pour g√©rer l'achat de v√©hicules en ench√®res
avec bases de donn√©es compl√®tement s√©par√©es par ench√®re.
"""

import sys
import traceback
import customtkinter as ctk

from gui.journees_selector import JourneesSelector
from gui.main_window import MainWindow


class Application:
    """Application principale avec s√©lection de base de donn√©es"""
    
    def __init__(self):
        # Configuration de CustomTkinter
        ctk.set_appearance_mode("light")  # Mode clair par d√©faut
        ctk.set_default_color_theme("blue")  # Th√®me bleu
        
        # Cr√©ation de la fen√™tre principale
        self.root = ctk.CTk()
        self.root.title("üóÉÔ∏è S√©lecteur de Base de Donn√©es - Ench√®res V√©hicules")
        self.root.geometry("1400x900")
        
        # Variables d'√©tat
        self.current_interface = None
        self.journee_active = None
        self.journees_manager = None
        
        # D√©marrer avec la s√©lection des bases de donn√©es
        self.afficher_selection_journees()
    
    def afficher_selection_journees(self):
        """Affiche l'interface de s√©lection des bases de donn√©es"""
        # Nettoyer l'interface actuelle
        self.nettoyer_interface()
        
        # Mettre √† jour le titre
        self.root.title("üóÉÔ∏è S√©lecteur de Base de Donn√©es - Ench√®res V√©hicules")
        
        # Cr√©er l'interface de s√©lection
        self.current_interface = JourneesSelector(
            self.root,
            self.on_journee_selected
        )
        self.current_interface.frame.pack(fill="both", expand=True)
        
        print("üóÉÔ∏è Interface de s√©lection des bases de donn√©es affich√©e")
    
    def on_journee_selected(self, journee, journees_manager):
        """Callback appel√© quand une base de donn√©es est s√©lectionn√©e"""
        self.journee_active = journee
        self.journees_manager = journees_manager
        
        print(f"üöÄ Base de donn√©es s√©lectionn√©e: {journee.nom}")
        
        # Lancer l'application avec cette base
        self.lancer_application_principale()
    
    def lancer_application_principale(self):
        """Lance l'application principale avec la base s√©lectionn√©e"""
        # Nettoyer l'interface actuelle
        self.nettoyer_interface()
        
        # Cr√©er l'interface principale avec la journ√©e
        self.current_interface = MainWindow(
            self.root,
            self.journee_active,
            self.journees_manager,
            self.retour_selection_journees
        )
        
        print(f"üöÄ Application lanc√©e avec: {self.journee_active.nom}")
    
    def retour_selection_journees(self):
        """Retourne √† la s√©lection des bases de donn√©es"""
        print("üîô Retour au s√©lecteur de bases de donn√©es")
        self.afficher_selection_journees()
    
    def nettoyer_interface(self):
        """Nettoie l'interface actuelle"""
        if self.current_interface and hasattr(self.current_interface, 'frame'):
            self.current_interface.frame.destroy()
        elif self.current_interface:
            # Pour MainWindow qui modifie directement la root
            for widget in self.root.winfo_children():
                widget.destroy()
        
        self.current_interface = None
    
    def run(self):
        """Lance la boucle principale de l'application"""
        try:
            print("üóÉÔ∏è Application initialis√©e avec syst√®me de bases s√©par√©es")
            self.root.mainloop()
            
        except Exception as e:
            print(f"‚ùå Erreur critique lors de l'ex√©cution: {e}")
            traceback.print_exc()
            input("Appuyez sur Entr√©e pour fermer...")


def main():
    """Point d'entr√©e principal de l'application"""
    try:
        app = Application()
        app.run()
        
    except Exception as e:
        print(f"‚ùå Erreur critique lors du d√©marrage: {e}")
        traceback.print_exc()
        input("Appuyez sur Entr√©e pour fermer...")
        sys.exit(1)


if __name__ == "__main__":
    main() 