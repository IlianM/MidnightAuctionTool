#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Onglet v√©hicules achet√©s - CustomTkinter
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import csv
from datetime import datetime
import os

# Imports pour l'export PDF
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas

from config.settings import AppSettings
from utils.tooltips import ajouter_tooltip, TOOLTIPS

class AchetesTab:
    """Onglet v√©hicules achet√©s avec CustomTkinter"""
    
    def __init__(self, parent, settings: AppSettings, data_adapter, 
                 style_manager, on_data_changed=None):
        self.parent = parent
        self.settings = settings
        self.data_adapter = data_adapter  # Nouveau nom pour le gestionnaire de donn√©es
        self.style_manager = style_manager
        self.on_data_changed = on_data_changed
        
        # Variables d'interface
        self.tree_achetes = None
        
        # Variables pour l'actualisation automatique
        self.auto_refresh_enabled = True
        self.auto_refresh_interval = 500  # 5 secondes
        self.last_data_hash = None
        
        # Cr√©er l'interface directement dans le parent (onglet du TabView)
        self.creer_interface()
        
        # D√©marrer l'actualisation automatique
        self.demarrer_auto_refresh()
    
    def creer_interface(self):
        """Cr√©e l'interface de l'onglet achet√©s avec CustomTkinter"""
        # Cr√©er un scrollable frame directement dans le parent
        self.scrollable_frame = ctk.CTkScrollableFrame(self.parent)
        self.scrollable_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Titre
        titre = ctk.CTkLabel(
            self.scrollable_frame,
            text="üèÜ V√âHICULES ACHET√âS",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        titre.pack(pady=(0, 20))
        
        # Frame pour les statistiques rapides
        stats_frame = ctk.CTkFrame(self.scrollable_frame)
        stats_frame.pack(fill="x", pady=(0, 20))
        
        # Statistiques
        self.label_stats = ctk.CTkLabel(
            stats_frame,
            text="Chargement des statistiques...",
            font=ctk.CTkFont(size=14)
        )
        self.label_stats.pack(pady=15)
        
        # Ajouter tooltip aux statistiques
        ajouter_tooltip(self.label_stats, "Statistiques automatiques calcul√©es √† partir des v√©hicules achet√©s : nombre total, marge totale, marge moyenne et investissement total.")
        
        # Frame pour les boutons
        buttons_frame = ctk.CTkFrame(self.scrollable_frame)
        buttons_frame.pack(fill="x", pady=(0, 15))
        
        # Boutons d'action
        export_button = ctk.CTkButton(
            buttons_frame,
            text="üìä Exporter CSV",
            command=self.exporter_csv,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        export_button.pack(side="left", padx=10, pady=10)
        ajouter_tooltip(export_button, TOOLTIPS['btn_export_csv'])
        
        # Bouton export PDF
        export_pdf_button = ctk.CTkButton(
            buttons_frame,
            text="üìÑ Exporter PDF",
            command=self.exporter_pdf,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        export_pdf_button.pack(side="left", padx=10, pady=10)
        ajouter_tooltip(export_pdf_button, "Exporter les v√©hicules achet√©s vers un document PDF professionnel")
        
        refresh_button = ctk.CTkButton(
            buttons_frame,
            text="üîÑ Actualiser",
            command=self.actualiser,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        refresh_button.pack(side="right", padx=15, pady=10)
        ajouter_tooltip(refresh_button, "Met √† jour l'affichage des v√©hicules achet√©s et recalcule les statistiques.")
        
        # Barre de recherche (juste au-dessus du tableau)
        self.creer_barre_recherche(self.scrollable_frame)
        
        # Frame pour le tableau
        tableau_frame = ctk.CTkFrame(self.scrollable_frame)
        tableau_frame.pack(fill="both", expand=True)
        
        # Tableau des v√©hicules achet√©s
        self.creer_tableau(tableau_frame)
        
        # Charger les donn√©es initiales
        self.actualiser()
    
    def creer_barre_recherche(self, parent):
        """Cr√©e la barre de recherche"""
        search_frame = ctk.CTkFrame(parent)
        search_frame.pack(fill="x", pady=(0, 20))
        
        # Titre de la section
        search_title = ctk.CTkLabel(
            search_frame,
            text="üîé RECHERCHE",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        search_title.pack(pady=(15, 10))
        
        # Frame pour la barre de recherche
        search_input_frame = ctk.CTkFrame(search_frame)
        search_input_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Label
        search_label = ctk.CTkLabel(
            search_input_frame,
            text="Rechercher:",
            font=ctk.CTkFont(size=12, weight="bold"),
            width=100
        )
        search_label.pack(side="left", padx=10, pady=10)
        
        # Variable de recherche
        self.var_recherche = ctk.StringVar()
        self.var_recherche.trace('w', self.on_recherche_change)
        
        # Champ de recherche
        self.entry_recherche = ctk.CTkEntry(
            search_input_frame,
            textvariable=self.var_recherche,
            placeholder_text="N¬∞ lot, marque ou mod√®le...",
            font=ctk.CTkFont(size=12),
            width=300
        )
        self.entry_recherche.pack(side="left", padx=10, pady=10, fill="x", expand=True)
        
        # Bouton effacer
        clear_button = ctk.CTkButton(
            search_input_frame,
            text="üóëÔ∏è Effacer",
            command=self.effacer_recherche,
            font=ctk.CTkFont(size=12),
            width=100
        )
        clear_button.pack(side="right", padx=10, pady=10)
        
        # Ajouter tooltips
        ajouter_tooltip(self.entry_recherche, "Recherche instantan√©e parmi les v√©hicules achet√©s par num√©ro de lot, marque ou mod√®le.")
        ajouter_tooltip(clear_button, "Efface le texte de recherche et affiche tous les v√©hicules achet√©s.")
    
    def creer_tableau(self, parent):
        """Cr√©e le tableau des v√©hicules achet√©s"""
        # Frame pour le scrollbar avec hauteur minimale
        container = ctk.CTkFrame(parent)
        container.pack(fill="both", expand=True, padx=15, pady=15)
        container.configure(height=250)  # Hauteur minimale de 250px
        
        # Treeview (tableau) avec description et prix de revente vide pour v√©hicules fra√Æchement achet√©s
        columns = ("lot", "marque", "modele", "annee", "prix_achat", "prix_revente", "description_reparations", "marge", "date_achat")
        self.tree_achetes = ttk.Treeview(container, columns=columns, show="headings", height=8)  # Hauteur optimis√©e
        
        # Configuration du style pour agrandir la police
        style = ttk.Style()
        style.configure("Treeview", font=('Segoe UI', 20), rowheight=50)  # Police normale pour coh√©rence
        style.configure("Treeview.Heading", font=('Segoe UI', 16, 'bold'))  # Police plus petite pour les en-t√™tes
        
        # Configuration des colonnes
        headings = {
            "lot": "LOT",
            "marque": "MARQUE", 
            "modele": "MOD√àLE",
            "annee": "ANN√âE",
            "prix_achat": "PRIX ACHAT",
            "prix_revente": "PRIX REVENTE",
            "description_reparations": "DESCRIPTION R√âPAR",  # NOUVEAU
            "marge": "MARGE",
            "date_achat": "DATE ACHAT"
        }
        
        for col, heading in headings.items():
            self.tree_achetes.heading(col, text=heading)
            if col in ["prix_achat", "prix_revente", "marge"]:
                self.tree_achetes.column(col, width=100, anchor="center")
            elif col in ["lot", "annee"]:
                self.tree_achetes.column(col, width=80, anchor="center")
            elif col == "description_reparations":
                self.tree_achetes.column(col, width=200, anchor="w")  # Plus large pour la description
            else:
                self.tree_achetes.column(col, width=120, anchor="w")
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(container, orient="vertical", command=self.tree_achetes.yview)
        h_scrollbar = ttk.Scrollbar(container, orient="horizontal", command=self.tree_achetes.xview)
        
        self.tree_achetes.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Placement
        self.tree_achetes.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # Configuration du grid
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        
        # Bind pour √©dition au double-clic
        self.tree_achetes.bind("<Double-1>", self.on_double_click)
        
        # Variables d'√©dition inline
        self.edit_entry = None
        self.editing_item = None
        self.editing_column = None
        
        # Ajouter tooltip au tableau
        ajouter_tooltip(self.tree_achetes, """Tableau des v√©hicules achet√©s avec indication de rentabilit√© :
‚Ä¢ Fond ORANGE = v√©hicule achet√©, en attente de vente
‚Ä¢ Fond VERT = achat rentable (marge positive)
‚Ä¢ Fond ROUGE = achat √† perte (marge n√©gative)
‚Ä¢ Double-clic pour modifier les cellules (sauf marge qui est automatique)""")
    
    def demarrer_auto_refresh(self):
        """D√©marre l'actualisation automatique p√©riodique"""
        if self.auto_refresh_enabled:
            self.auto_refresh()
    
    def auto_refresh(self):
        """Actualise automatiquement si les donn√©es ont chang√©"""
        try:
            # Cr√©er un hash des donn√©es pour d√©tecter les changements
            current_hash = self.calculer_hash_donnees()
            
            if current_hash != self.last_data_hash:
                # Les donn√©es ont chang√©, actualiser silencieusement
                self.actualiser_silencieux()
                self.last_data_hash = current_hash
            
            # Programmer la prochaine actualisation
            if self.auto_refresh_enabled and hasattr(self.parent, 'winfo_exists') and self.parent.winfo_exists():
                self.parent.after(self.auto_refresh_interval, self.auto_refresh)
                
        except Exception as e:
            # En cas d'erreur, continuer sans planter
            print(f"‚ö†Ô∏è Erreur auto-refresh achet√©s: {e}")
            if self.auto_refresh_enabled and hasattr(self.parent, 'winfo_exists') and self.parent.winfo_exists():
                self.parent.after(self.auto_refresh_interval, self.auto_refresh)
    
    def calculer_hash_donnees(self):
        """Calcule un hash des donn√©es pour d√©tecter les changements"""
        try:
            # Cr√©er une repr√©sentation des donn√©es importantes
            data_repr = []
            
            # Ajouter les v√©hicules achet√©s
            for v in self.data_adapter.vehicules_achetes:
                data_repr.append(f"{v.lot}|{v.marque}|{v.modele}|{v.prix_revente}|{v.prix_achat}|{v.cout_reparations}")
            
            # Retourner un hash simple
            return hash('|'.join(data_repr))
            
        except Exception:
            return None
    
    def actualiser_silencieux(self):
        """Actualise sans messages d'erreur visibles"""
        try:
            self.actualiser_tableaux_seulement()
        except Exception:
            pass  # Ignorer les erreurs pour √©viter les popups
    
    def actualiser_tableaux_seulement(self):
        """Met √† jour uniquement les tableaux sans messages"""
        # Effacer le tableau
        if self.tree_achetes and self.tree_achetes.winfo_exists():
            for item in self.tree_achetes.get_children():
                self.tree_achetes.delete(item)
        
        # Remplir avec les v√©hicules achet√©s
        vehicules_achetes = self.filtrer_vehicules(self.data_adapter.vehicules_achetes)
        total_marge = 0
        total_investissement = 0
        
        for vehicule in vehicules_achetes:
            prix_achat = vehicule.get_prix_numerique('prix_achat')
            prix_revente = vehicule.get_prix_numerique('prix_revente')
            cout_reparations = vehicule.get_prix_numerique('cout_reparations')
            
            # V√©rifier si le v√©hicule a un prix de revente renseign√©
            prix_revente_renseigne = vehicule.prix_revente and vehicule.prix_revente.strip() and vehicule.prix_revente != "0"
            
            if not prix_revente_renseigne:  # V√©hicule achet√© mais pas encore vendu
                marge_affichage = "En attente"
                tags = ("en_attente",)
                marge = 0  # Pour les stats
                prix_revente_affichage = ""  # Vide dans le tableau
            else:
                # V√©hicule vendu, calcul de la marge r√©elle
                cout_total = prix_achat + cout_reparations
                marge = prix_revente - cout_total
                marge_affichage = f"{marge:+.0f}‚Ç¨"
                prix_revente_affichage = f"{prix_revente:.0f}‚Ç¨"
                
                # Couleur selon la rentabilit√©
                if marge >= 0:
                    tags = ("rentable",)    # Vert - rentable
                else:
                    tags = ("non_rentable",)  # Rouge - √† perte
            
            if self.tree_achetes and self.tree_achetes.winfo_exists():
                self.tree_achetes.insert("", "end", values=(
                    vehicule.lot,
                    vehicule.marque,
                    vehicule.modele,
                    vehicule.annee,
                    f"{prix_achat:.0f}‚Ç¨",
                    prix_revente_affichage,  # Vide si pas vendu
                    vehicule.chose_a_faire,  # Description des r√©parations
                    marge_affichage,
                    vehicule.date_achat if vehicule.date_achat else "N/A"
                ), tags=tags)
            
            total_marge += marge
            total_investissement += prix_achat
        
        # Configuration des couleurs
        if self.tree_achetes and self.tree_achetes.winfo_exists():
            self.tree_achetes.tag_configure("rentable", background="#4CAF50", foreground="white")
            self.tree_achetes.tag_configure("non_rentable", background="#F44336", foreground="white")
            self.tree_achetes.tag_configure("en_attente", background="#FF9800", foreground="white")  # Orange pour en attente
        
        # Mise √† jour des statistiques
        nb_achetes = len(vehicules_achetes)
        marge_moyenne = total_marge / nb_achetes if nb_achetes > 0 else 0
        
        stats_text = f"üí∞ {nb_achetes} v√©hicules achet√©s | Marge totale: {total_marge:+.0f}‚Ç¨ | Marge moyenne: {marge_moyenne:+.0f}‚Ç¨ | Investissement: {total_investissement:.0f}‚Ç¨"
        if hasattr(self, 'label_stats') and self.label_stats.winfo_exists():
            self.label_stats.configure(text=stats_text)
    
    def arreter_auto_refresh(self):
        """Arr√™te l'actualisation automatique"""
        self.auto_refresh_enabled = False

    def actualiser(self):
        """Met √† jour l'affichage des v√©hicules achet√©s"""
        # Effacer le tableau
        for item in self.tree_achetes.get_children():
            self.tree_achetes.delete(item)
        
        # Remplir avec les v√©hicules achet√©s
        vehicules_achetes = self.filtrer_vehicules(self.data_adapter.vehicules_achetes)
        total_marge = 0
        total_investissement = 0
        
        for vehicule in vehicules_achetes:
            prix_achat = vehicule.get_prix_numerique('prix_achat')
            prix_revente = vehicule.get_prix_numerique('prix_revente')
            cout_reparations = vehicule.get_prix_numerique('cout_reparations')
            
            # V√©rifier si le v√©hicule a un prix de revente renseign√©
            prix_revente_renseigne = vehicule.prix_revente and vehicule.prix_revente.strip() and vehicule.prix_revente != "0"
            
            if not prix_revente_renseigne:  # V√©hicule achet√© mais pas encore vendu
                marge_affichage = "En attente"
                tags = ("en_attente",)
                marge = 0  # Pour les stats
                prix_revente_affichage = ""  # Vide dans le tableau
            else:
                # V√©hicule vendu, calcul de la marge r√©elle
                cout_total = prix_achat + cout_reparations
                marge = prix_revente - cout_total
                marge_affichage = f"{marge:+.0f}‚Ç¨"
                prix_revente_affichage = f"{prix_revente:.0f}‚Ç¨"
                
                # Couleur selon la rentabilit√©
                if marge >= 0:
                    tags = ("rentable",)    # Vert - rentable
                else:
                    tags = ("non_rentable",)  # Rouge - √† perte
            
            self.tree_achetes.insert("", "end", values=(
                vehicule.lot,
                vehicule.marque,
                vehicule.modele,
                vehicule.annee,
                f"{prix_achat:.0f}‚Ç¨",
                prix_revente_affichage,  # Vide si pas vendu
                vehicule.chose_a_faire,  # Description des r√©parations
                marge_affichage,
                vehicule.date_achat if vehicule.date_achat else "N/A"
            ), tags=tags)
            
            total_marge += marge
            total_investissement += prix_achat
        
        # Configuration des couleurs (m√™me logique que rep√©rage)
        self.tree_achetes.tag_configure("rentable", background="#4CAF50", foreground="white")    # Vert avec texte blanc
        self.tree_achetes.tag_configure("non_rentable", background="#F44336", foreground="white") # Rouge avec texte blanc
        self.tree_achetes.tag_configure("en_attente", background="#FF9800", foreground="white")  # Orange pour en attente
        
        # Mise √† jour des statistiques
        nb_achetes = len(vehicules_achetes)
        marge_moyenne = total_marge / nb_achetes if nb_achetes > 0 else 0
        
        stats_text = f"üí∞ {nb_achetes} v√©hicules achet√©s | Marge totale: {total_marge:+.0f}‚Ç¨ | Marge moyenne: {marge_moyenne:+.0f}‚Ç¨ | Investissement: {total_investissement:.0f}‚Ç¨"
        self.label_stats.configure(text=stats_text)
        
        # Mettre √† jour le hash pour l'auto-refresh
        self.last_data_hash = self.calculer_hash_donnees()

    def exporter_csv(self):
        """Exporte les donn√©es vers un fichier CSV"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("Fichiers CSV", "*.csv")],
                title="Exporter les v√©hicules achet√©s"
            )
            
            if filename:
                with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
                    writer = csv.writer(csvfile, delimiter=';')
                    
                    # En-t√™tes
                    writer.writerow([
                        "N¬∞ LOT", "MARQUE", "MOD√àLE", "ANN√âE", "PRIX ACHAT", 
                        "PRIX REVENTE", "DESCRIPTION R√âPARATIONS", "MARGE", "DATE ACHAT", "KM"
                    ])
                    
                    # Donn√©es
                    for vehicule in self.data_adapter.vehicules_achetes:
                        writer.writerow([
                            vehicule.lot,
                            vehicule.marque,
                            vehicule.modele,
                            vehicule.annee,
                            vehicule.prix_achat,
                            "",  # Prix de revente vide
                            vehicule.chose_a_faire,  # Description des r√©parations
                            f"{vehicule.calculer_marge():.0f}",
                            vehicule.date_achat if vehicule.date_achat else "",
                            vehicule.kilometrage
                        ])
                
                messagebox.showinfo("‚úÖ Succ√®s", f"Export r√©ussi vers:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de l'export: {e}")

    def exporter_pdf(self):
        """Exporte les donn√©es vers un fichier PDF professionnel"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("Fichiers PDF", "*.pdf")],
                title="Exporter les v√©hicules achet√©s en PDF"
            )
            
            if filename:
                # Cr√©er le document PDF avec marges
                doc = SimpleDocTemplate(
                    filename, 
                    pagesize=A4,
                    rightMargin=50,
                    leftMargin=50,
                    topMargin=50,
                    bottomMargin=50
                )
                elements = []
                styles = getSampleStyleSheet()
                
                # Style personnalis√© pour le titre
                title_style = ParagraphStyle(
                    'CustomTitle',
                    parent=styles['Heading1'],
                    fontSize=18,
                    textColor=colors.HexColor('#2E86AB'),
                    spaceAfter=30,
                    alignment=1  # Centr√©
                )
                
                # R√©cup√©rer le nom de la journ√©e
                journee_nom = "Ench√®re"
                if hasattr(self.data_adapter, 'journee') and self.data_adapter.journee:
                    journee_nom = self.data_adapter.journee.nom
                
                # Titre principal
                titre = f"üèÜ RAPPORT V√âHICULES ACHET√âS - {journee_nom.upper()}"
                elements.append(Paragraph(titre, title_style))
                
                # Date du rapport
                date_rapport = datetime.now().strftime("%d/%m/%Y √† %H:%M")
                date_style = ParagraphStyle(
                    'DateStyle',
                    parent=styles['Normal'],
                    fontSize=10,
                    textColor=colors.grey,
                    alignment=1,
                    spaceAfter=20
                )
                elements.append(Paragraph(f"Rapport g√©n√©r√© le {date_rapport}", date_style))
                
                # Statistiques
                nb_achetes = len(self.data_adapter.vehicules_achetes)
                total_investissement = sum(v.get_prix_numerique('prix_achat') for v in self.data_adapter.vehicules_achetes)
                total_marge = sum(v.get_prix_numerique('prix_revente') - v.get_prix_numerique('prix_achat') - v.get_prix_numerique('cout_reparations') 
                                for v in self.data_adapter.vehicules_achetes if v.prix_revente and v.prix_revente.strip())
                marge_moyenne = total_marge / nb_achetes if nb_achetes > 0 else 0
                
                stats_text = f"""
                <b>üìä STATISTIQUES</b><br/>
                ‚Ä¢ Nombre de v√©hicules achet√©s : <b>{nb_achetes}</b><br/>
                ‚Ä¢ Investissement total : <b>{total_investissement:,.0f}‚Ç¨</b><br/>
                ‚Ä¢ Marge totale : <b>{total_marge:+,.0f}‚Ç¨</b><br/>
                ‚Ä¢ Marge moyenne : <b>{marge_moyenne:+,.0f}‚Ç¨</b>
                """
                
                stats_style = ParagraphStyle(
                    'StatsStyle',
                    parent=styles['Normal'],
                    fontSize=12,
                    spaceAfter=30,
                    backColor=colors.HexColor('#F5F5F5'),
                    borderColor=colors.HexColor('#2E86AB'),
                    borderWidth=1,
                    borderPadding=10
                )
                elements.append(Paragraph(stats_text, stats_style))
                elements.append(Spacer(1, 20))
                
                # Titre du tableau
                table_title = Paragraph("<b>üìã D√âTAIL DES V√âHICULES</b>", styles['Heading2'])
                elements.append(table_title)
                elements.append(Spacer(1, 10))
                
                # Donn√©es du tableau
                data = [
                    ["LOT", "MARQUE", "MOD√àLE", "ANN√âE", "PRIX ACHAT", "PRIX REVENTE", "MARGE", "DATE ACHAT"]
                ]
                
                for vehicule in self.data_adapter.vehicules_achetes:
                    prix_achat = vehicule.get_prix_numerique('prix_achat')
                    prix_revente = vehicule.get_prix_numerique('prix_revente')
                    cout_reparations = vehicule.get_prix_numerique('cout_reparations')
                    
                    # Calcul de la marge
                    if prix_revente > 0:
                        marge = prix_revente - prix_achat - cout_reparations
                        marge_str = f"{marge:+.0f}‚Ç¨"
                        prix_revente_str = f"{prix_revente:.0f}‚Ç¨"
                    else:
                        marge_str = "En attente"
                        prix_revente_str = "-"
                    
                    data.append([
                        vehicule.lot,
                        vehicule.marque,
                        vehicule.modele,
                        vehicule.annee,
                        f"{prix_achat:.0f}‚Ç¨",
                        prix_revente_str,
                        marge_str,
                        vehicule.date_achat if vehicule.date_achat else "N/A"
                    ])
                
                # Cr√©er le tableau
                table = Table(data, colWidths=[0.8*inch, 1.2*inch, 1.2*inch, 0.8*inch, 1*inch, 1*inch, 1*inch, 1*inch])
                
                # Style du tableau
                table.setStyle(TableStyle([
                    # En-t√™te
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2E86AB')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    
                    # Corps du tableau
                    ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    
                    # Alternance de couleurs pour les lignes
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#F8F9FA')])
                ]))
                
                elements.append(table)
                
                # Pied de page
                elements.append(Spacer(1, 30))
                footer_style = ParagraphStyle(
                    'FooterStyle',
                    parent=styles['Normal'],
                    fontSize=8,
                    textColor=colors.grey,
                    alignment=1
                )
                footer_text = f"Gestionnaire d'Ench√®res - Rapport g√©n√©r√© automatiquement - {date_rapport}"
                elements.append(Paragraph(footer_text, footer_style))
                
                # Construire le document
                doc.build(elements)
                
                messagebox.showinfo("‚úÖ Succ√®s", f"Export PDF r√©ussi vers:\n{filename}")
                
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de l'export PDF: {e}")

    def on_recherche_change(self, *args):
        """D√©clench√© quand le texte de recherche change"""
        self.actualiser()

    def effacer_recherche(self):
        """Efface la recherche"""
        self.var_recherche.set("")

    def filtrer_vehicules(self, vehicules):
        """Filtre les v√©hicules selon le terme de recherche"""
        terme = self.var_recherche.get().lower().strip()
        if not terme:
            return vehicules
        
        vehicules_filtres = []
        for vehicule in vehicules:
            # Recherche dans lot, marque et mod√®le
            if (terme in vehicule.lot.lower() or 
                terme in vehicule.marque.lower() or 
                terme in vehicule.modele.lower()):
                vehicules_filtres.append(vehicule)
        
        return vehicules_filtres 

    def on_double_click(self, event):
        """D√©marre l'√©dition inline sur double-clic"""
        try:
            # Fermer l'√©dition pr√©c√©dente si elle existe
            self.finish_edit()
            
            # Identifier l'√©l√©ment et la colonne cliqu√©s
            item = self.tree_achetes.identify_row(event.y)
            column = self.tree_achetes.identify_column(event.x)
            
            if not item or column == "#0":
                return
            
            # V√©rifier si la colonne peut √™tre √©dit√©e
            col_index = int(column.replace('#', '')) - 1
            columns_names = ["lot", "marque", "modele", "annee", "prix_achat", "prix_revente", "description_reparations", "marge", "date_achat"]
            
            if 0 <= col_index < len(columns_names):
                col_name = columns_names[col_index]
                
                # INTERDIRE l'√©dition des colonnes marge et date_achat
                if col_name in ["marge", "date_achat"]:
                    if col_name == "marge":
                        messagebox.showinfo("Information", "La marge est calcul√©e automatiquement.\nModifiez le prix de revente pour la changer.")
                    else:
                        messagebox.showinfo("Information", "La date d'achat est g√©r√©e automatiquement.")
                    return
            
            # R√©cup√©rer les coordonn√©es de la cellule
            bbox = self.tree_achetes.bbox(item, column)
            if not bbox:
                return
            
            # Stocker les informations d'√©dition
            self.editing_item = item
            self.editing_column = column
            
            # R√©cup√©rer la valeur actuelle
            values = self.tree_achetes.item(item)['values']
            current_value = values[col_index] if col_index < len(values) else ""
            
            # Cr√©er le widget d'√©dition avec police normale
            self.edit_entry = tk.Entry(self.tree_achetes, font=('Segoe UI', 14))
            self.edit_entry.place(x=bbox[0], y=bbox[1], width=bbox[2], height=bbox[3])
            self.edit_entry.insert(0, str(current_value))
            self.edit_entry.select_range(0, tk.END)
            self.edit_entry.focus()
            
            # Bind des √©v√©nements
            self.edit_entry.bind('<Return>', self.on_edit_enter)
            self.edit_entry.bind('<Escape>', self.on_edit_escape)
            self.edit_entry.bind('<FocusOut>', self.on_edit_focusout)
            
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de l'√©dition: {e}")

    def on_edit_enter(self, event):
        """Valide l'√©dition avec Entr√©e"""
        self.save_edit()

    def on_edit_escape(self, event):
        """Annule l'√©dition avec √âchap"""
        self.finish_edit()

    def on_edit_focusout(self, event):
        """Sauvegarde quand on perd le focus"""
        self.save_edit()

    def save_edit(self):
        """Sauvegarde la modification"""
        if not self.edit_entry or not self.editing_item:
            return
        
        try:
            # R√©cup√©rer la nouvelle valeur
            new_value = self.edit_entry.get()
            
            # R√©cup√©rer l'index de la ligne et le v√©hicule
            index = self.tree_achetes.index(self.editing_item)
            vehicule = self.data_adapter.vehicules_achetes[index]
            
            # R√©cup√©rer le nom de la colonne
            columns_names = ["lot", "marque", "modele", "annee", "prix_achat", "prix_revente", "description_reparations", "marge", "date_achat"]
            col_index = int(self.editing_column.replace('#', '')) - 1
            
            if 0 <= col_index < len(columns_names):
                col_name = columns_names[col_index]
                
                # Mapper description_reparations vers chose_a_faire dans le mod√®le
                if col_name == "description_reparations":
                    setattr(vehicule, "chose_a_faire", new_value)
                else:
                    # Mettre √† jour le v√©hicule
                    setattr(vehicule, col_name, new_value)
                
                # Sauvegarder
                self.data_adapter.sauvegarder_donnees()
                
                # Actualiser l'affichage
                self.actualiser()
                
                if self.on_data_changed:
                    self.on_data_changed()
                
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de la sauvegarde: {e}")
        finally:
            self.finish_edit()

    def finish_edit(self):
        """Termine l'√©dition et nettoie"""
        if self.edit_entry:
            self.edit_entry.destroy()
            self.edit_entry = None
        self.editing_item = None
        self.editing_column = None 